import React, { useEffect, useState } from 'react'
import { getAllAccounts } from '../services/api'
import ProductCard from '../components/ProductCard'
import Header from '../components/Header'
import Footer from '../components/Footer'
import '../App.css' 
import './HomePage.css'

function HomePage() {
  const [accounts, setAccounts] = useState([])
  const [minPrice, setMinPrice] = useState('')
  const [maxPrice, setMaxPrice] = useState('')
  const [rank, setRank] = useState('T·∫•t c·∫£ rank')
  const [page, setPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [sortPrice, setSortPrice] = useState('none')
  const [isPending, setIsPending] = useState(false)

  const fetchAccounts = async (filters = {}, customPage = 1) => {
    try {
      setIsPending(true)
      setAccounts([])

      const params = {
        rank: rank !== 'T·∫•t c·∫£ rank' ? rank : '',
        page: customPage,
        limit: 50,
        ...filters
      }

      const data = await getAllAccounts(params)
      // console.log('üëâ T·ªïng acc:', data.total)
      // console.log('üëâ Danh s√°ch acc:', data.accounts)

      setAccounts(data.accounts || [])
      setTotalPages(data.totalPages)
      setPage(customPage)
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch acc:', error)
    } finally {
      setIsPending(false)
    }
  }

  useEffect(() => {
    fetchAccounts()
  }, [])

  const handleSearch = () => {
    const filters = {
      minPrice,
      maxPrice,
      rank: rank !== 'T·∫•t c·∫£ rank' ? rank : '',
      sortPrice: sortPrice !== 'none' ? sortPrice : ''
    }
    fetchAccounts(filters, 1)
  }

  return (
    <>
      <Header />
      <div style={{ padding: '10px 20px' }}>
        <h1>Danh S√°ch Nick</h1>
        <div className="main-wrapper">
        <div className="filter-container">
          <input
            type="number"
            placeholder="Gi√° t·ªëi thi·ªÉu"
            value={minPrice}
            onChange={(e) => setMinPrice(e.target.value)}
          />
          <input
            type="number"
            placeholder="Gi√° t·ªëi ƒëa"
            value={maxPrice}
            onChange={(e) => setMaxPrice(e.target.value)}
          />
          <select value={rank} onChange={(e) => setRank(e.target.value)}>
            <option>T·∫•t c·∫£ rank</option>
            <option>B·∫°c</option>
            <option>V√†ng</option>
            <option>B·∫°ch Kim</option>
            <option>Kim C∆∞∆°ng</option>
            <option>Tinh Anh</option>
            <option>Cao Th·ªß</option>
            <option>Th√°ch ƒê·∫•u</option>
          </select>
          <select value={sortPrice} onChange={(e) => setSortPrice(e.target.value)}>
            <option value="none">S·∫Øp x·∫øp gi√°</option>
            <option value="asc">Gi√° tƒÉng d·∫ßn</option>
            <option value="desc">Gi√° gi·∫£m d·∫ßn</option>
          </select>
          <button style={{cursor:'pointer'}} onClick={handleSearch}>T√¨m</button>
        </div>

        <div className="product-list">
        <div className="product-list">
          {isPending ? (
            <div className="spinner" />
          ) : (
            accounts.map((account) => (
              <ProductCard key={account._id} account={account} />
            ))
          )}
        </div>

        </div>
        </div>
        {/* Ph√¢n trang */}
        <div className="pagination">
            {/* M≈©i t√™n l√πi */}
            <button
              onClick={() => {
                if (page > 1) {
                  fetchAccounts({
                    minPrice,
                    maxPrice,
                    rank: rank !== 'T·∫•t c·∫£ rank' ? rank : '',
                    sortPrice: sortPrice !== 'none' ? sortPrice : ''
                  }, page - 1)
                }
              }}
              disabled={page === 1}
            >
              &laquo;
            </button>

            {/* C√°c s·ªë trang */}
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((p) => (
              <button
                key={p}
                onClick={() => fetchAccounts({
                  minPrice,
                  maxPrice,
                  rank: rank !== 'T·∫•t c·∫£ rank' ? rank : '',
                  sortPrice: sortPrice !== 'none' ? sortPrice : ''
                }, p)}
                className={p === page ? 'active' : ''}
              >
                {p}
              </button>
            ))}

            {/* M≈©i t√™n ti·∫øn */}
            <button
              onClick={() => {
                if (page < totalPages) {
                  fetchAccounts({
                    minPrice,
                    maxPrice,
                    rank: rank !== 'T·∫•t c·∫£ rank' ? rank : '',
                    sortPrice: sortPrice !== 'none' ? sortPrice : ''
                  }, page + 1)
                }
              }}
              disabled={page === totalPages}
            >
              &raquo;
            </button>
          </div>



      </div>
      <Footer />
    </>
  )
}

export default HomePage
